# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AccountDto {
    bannerImage: ImageDto
    bio: String
    createdAt: DateTime!
    email: String
    id: String!
    location: String
    platform: String!
    profileImage: ImageDto
    role: String!
    updatedAt: DateTime!
    username: String!
}

type AuthOutput {
    id: String!
    username: String!
}

type EditProfileOutput {
    bannerImage: ImageDto
    bio: String
    createdAt: DateTime!
    email: String
    id: String!
    location: String
    platform: String!
    profileImage: ImageDto
    role: String!
    updatedAt: DateTime!
    username: String!
}

type GetPlaceListOutput {
    items: [PlaceDto!]!
    totalCount: Int!
}

type ImageDto {
    key: String!
    url: String!
}

type MeOutput {
    bannerImage: ImageDto
    bio: String
    email: String
    id: String!
    location: String
    platform: String!
    profileImage: ImageDto
    role: String!
    username: String!
}

type Mutation {
    createPlace(input: CreatePlaceInput!): PlaceDto!
    createPlaceComment(input: CreatePlaceCommentInput!): PlaceCommentDto!
    editProfile(input: EditProfileInput!): EditProfileOutput!
    signIn(input: SignInInput!): SignInOutput!
    signUp(input: SignUpInput!): SignUpOutput!
}

type PlaceCommentDto {
    account: AccountDto!
    content: String!
    createdAt: DateTime!
    id: Int!
    images: [ImageDto!]!
    place: PlaceDto!
    updatedAt: DateTime!
}

type PlaceDto {
    address: String
    buildingName: String
    comments: [PlaceCommentDto!]!
    content: String!
    createdAt: DateTime!
    id: Int!
    images: [ImageDto!]
    latitude: String
    longitude: String
    updatedAt: DateTime!
}

type Query {
    auth: AuthOutput!
    getPlace(input: GetPlaceInput!): PlaceDto!
    getPlaceList(input: GetPlaceListInput!): GetPlaceListOutput!
    hello: String!
    me: MeOutput!
}

type SignInOutput {
    token: String!
}

type SignUpOutput {
    createdAt: DateTime!
    email: String
    id: String!
    username: String!
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input CreatePlaceCommentInput {
    accountId: String!
    content: String!
    images: [ImageInput!]!
    placeId: Int!
}

input CreatePlaceInput {
    address: String
    buildingName: String
    content: String!
    images: [ImageInput!]
    latitude: String
    longitude: String
}

input EditProfileInput {
    bannerImage: ImageInput
    bio: String
    location: String
    profileImage: ImageInput
    username: String!
}

input GetPlaceInput {
    id: Int!
}

input GetPlaceListInput {
    limit: Int = 10
    offset: Int = 0
}

input ImageInput {
    key: String!
    url: String!
}

input SignInInput {
    email: String
    password: String
    "EMAIL, KAKAO"
    platform: String!
    platformAccessToken: String
}

input SignUpInput {
    email: String!
    password: String!
    username: String!
}
